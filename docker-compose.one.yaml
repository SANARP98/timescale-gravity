version: "3.9"

services:
  # Shared TimescaleDB database
  db:
    image: timescale/timescaledb:latest-pg14
    container_name: unified-timescale-db
    environment:
      POSTGRES_DB: trading
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db_setup.sql:/docker-entrypoint-initdb.d/001-db-setup.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - unified-trading-network

  # Timescale Gravity Master App
  master-app:
    build: .
    container_name: timescale-gravity-master
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PGHOST: db
      PGPORT: "5432"
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: trading
      PYTHONPATH: /app
      NUMBA_CACHE_DIR: /tmp/numba_cache
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 4g
        reservations:
          cpus: "1"
          memory: 2g
    ports:
      - "8200:8200"
    volumes:
      - .:/app
      - ./exports:/tmp
    restart: unless-stopped
    command: ["uvicorn", "master.main:app", "--host", "0.0.0.0", "--port", "8200", "--reload"]
    networks:
      - unified-trading-network

  # Timescale Gravity Main App
  # main-app:
  #   build: .
  #   container_name: timescale-gravity-app
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   environment:
  #     PGHOST: db
  #     PGPORT: "5432"
  #     PGUSER: postgres
  #     PGPASSWORD: postgres
  #     PGDATABASE: trading
  #     PYTHONPATH: /app
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "4"
  #         memory: 4g
  #       reservations:
  #         cpus: "1"
  #         memory: 2g
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - .:/app
  #   restart: unless-stopped
  #   command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  #   networks:
  #     - unified-trading-network

  # Tester App
  # tester-app:
  #   build:
  #     context: .
  #     dockerfile: tester_app/Dockerfile
  #   container_name: timescale-gravity-tester
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   environment:
  #     PGHOST: db
  #     PGPORT: "5432"
  #     PGUSER: postgres
  #     PGPASSWORD: postgres
  #     PGDATABASE: trading
  #     TESTER_MAX_WORKERS: "${TESTER_MAX_WORKERS:-4}"
  #     PYTHONPATH: /app
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "4"
  #         memory: 8g
  #       reservations:
  #         cpus: "2"
  #         memory: 4g
  #   ports:
  #     - "8100:8100"
  #   volumes:
  #     - .:/app
  #     - ./exports:/tmp
  #   restart: unless-stopped
  #   command: ["uvicorn", "tester_app.main:app", "--host", "0.0.0.0", "--port", "8100", "--reload"]
  #   networks:
  #     - unified-trading-network

  # Water-Life Trading Bot
  water-life-bot:
    build:
      context: ./water-life-copy
      dockerfile: Dockerfile
    container_name: water-life-scalping-bot
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "7777:7777"
    env_file:
      - ./water-life-copy/.env
    environment:
      # Database connection (shared with other apps)
      PGHOST: db
      PGPORT: "5432"
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: trading

      # Add parent directory to Python path for tsdb_pipeline access
      PYTHONPATH: /parent:/app

      # OpenAlgo API Configuration
      OPENALGO_API_KEY: ${OPENALGO_API_KEY}
      OPENALGO_API_HOST: ${OPENALGO_API_HOST:-https://api.openalgo.in}
      OPENALGO_WS_URL: ${OPENALGO_WS_URL}

      # Trading Configuration
      SYMBOL: ${SYMBOL:-NIFTY}
      EXCHANGE: ${EXCHANGE:-NFO}
      PRODUCT: ${PRODUCT:-NRML}
      LOTS: ${LOTS:-1}
      TRADE_DIRECTION: ${TRADE_DIRECTION:-long_only}

      # Strategy Parameters
      INTERVAL: ${INTERVAL:-5m}
      EMA_FAST: ${EMA_FAST:-5}
      EMA_SLOW: ${EMA_SLOW:-20}
      ATR_WINDOW: ${ATR_WINDOW:-14}
      ATR_MIN_POINTS: ${ATR_MIN_POINTS:-2.0}

      # Risk Management
      TARGET_POINTS: ${TARGET_POINTS:-10.0}
      STOPLOSS_POINTS: ${STOPLOSS_POINTS:-2.0}
      DAILY_LOSS_CAP: ${DAILY_LOSS_CAP:--1000.0}
      ENABLE_EOD_SQUARE_OFF: ${ENABLE_EOD_SQUARE_OFF:-true}

      # Other
      WARMUP_DAYS: ${WARMUP_DAYS:-10}
      BROKERAGE_PER_TRADE: ${BROKERAGE_PER_TRADE:-20.0}
      SLIPPAGE_POINTS: ${SLIPPAGE_POINTS:-0.10}

    volumes:
      # Mount parent project files for tsdb_pipeline access
      - ./tsdb_pipeline.py:/parent/tsdb_pipeline.py:ro
      - ./symbol_utils.py:/parent/symbol_utils.py:ro
      - ./app:/parent/app:ro
      # Mount only logs directory to persist logs outside container
      - ./water-life-copy/logs:/app/logs
      # Optional: Mount state.json for persistence across restarts
      - ./water-life-copy/state.json:/app/state.json

    restart: unless-stopped
    networks:
      - unified-trading-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  unified-trading-network:
    driver: bridge
    name: unified-trading-network

volumes:
  db_data:
    name: unified-trading-db-data
